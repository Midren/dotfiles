#!/bin/bash

IPC_SEARCH=/tmp/polybar_mqueue_search
WINDOW_ID_SEARCH=/tmp/window_id_search

IPC_ROFI=/tmp/polybar_mqueue_rofi
WINDOW_ID_ROFI=/tmp/window_id_rofi

IPC_OPTIONS=/tmp/polybar_mqueue_options
WINDOW_ID_OPTIONS=/tmp/window_id_options

WINDOW_ID_CONKY=/tmp/conky_window_id

create_bar() {
    polybar $1 &
    BAR_ID=$!
    echo PID = $BAR_ID
    WIN_ID=$(xdotool search --sync --pid $BAR_ID)
    echo $WIN_ID > $2
    xdotool windowunmap $WIN_ID
}

animation_open() {
    for BAR_ID in $@; do
        xdotool windowmap $BAR_ID
    done
    for y in `seq -310 20 10`; do
        for BAR_ID in $@; do
            xdotool windowmove $BAR_ID x $y
        done
    done
}

animation_close() {
    for y in `seq 10 20 -310`; do
        for BAR_ID in $@; do
            xdotool windowmove $BAR_ID x $y
        done
    done
    for BAR_ID in $@; do
        xdotool windowunmap $BAR_ID
    done
}



conky_launch() {
    # Hacky X11 magic to make Conky appear above polybar
    killall conky
    while pgrep -u $UID -x conky > /dev/null; do sleep 0.5; done
    # xdotool search can't find Conky's window but fortunately Conky outputs it
    conky -c ~/.config/conky/config 2> /tmp/conky_out
    # Extract the hex window id from Conky's output
    HEX=$(awk '/drawing to created window/ {print $NF}' /tmp/conky_out | tr -d '()' | awk -Fx '{print $2}')
    echo $HEX
    WIN_ID=$(( 16#$HEX )) # convert to decimal
    echo $WIN_ID
    xdotool windowunmap $WIN_ID
    echo $WIN_ID > $WINDOW_ID_CONKY
}

launch() {
    killall -q polybar
    while pgrep -u $UID -x polybar > /dev/null; do sleep 0.5; done
    conky_launch

    outputs=$(xrandr --query | grep " connected" | cut -d" " -f1)
    # When external monitor is not connected on start up
    # laptop screen is eDP-1 instead of eDP-1-1
    tray_output=$(xrandr | grep "eDP" | cut -d' ' -f1)

    for m in $outputs; do
      if [[ $m == "HDMI-0" ]]; then
          tray_output=$m
          echo tray output $tray_output
      fi
    done

    echo "---" | tee -a /tmp/full.log /tmp/full.log
    for m in $outputs; do
        echo $m
        TRAY_POSITION=none
        if [[ $m == $tray_output ]]; then
          TRAY_POSITION=center
        fi
        export TRAY_POSITION
        export MONITOR=$m
        polybar --reload full  >>/tmp/full.log 2>&1 &
        BAR_ID=$!
        rm -f /tmp/polybar_mqueue_full
        ln -s /tmp/polybar_mqueue.$BAR_ID /tmp/polybar_mqueue_full
        create_bar left     $WINDOW_ID_SEARCH  &
        sleep 0.2
        create_bar center   $WINDOW_ID_ROFI    &
        sleep 0.2
        create_bar right    $WINDOW_ID_OPTIONS &
        disown
    done
}

rofi_open() {
    BAR_ID=$(cat $WINDOW_ID_ROFI)
    animation_open $BAR_ID &
    rofi -show run -location 2
    animation_close $BAR_ID
}

search_open() {
    BAR_ID=$(cat $WINDOW_ID_SEARCH)
    animation_open $BAR_ID &
    rofi -show window -location 1 -width 29 -fixed-num-lines 11
    animation_close $BAR_ID
}

menu_options() {

    exits=(
      '<span font_desc="TerminessTTF Nerd Font Mono 18">ÔÅ†</span> Back'
      '<span font_desc="TerminessTTF Nerd Font Mono 18">ÔÑæ</span> Lock'
      '<span font_desc="TerminessTTF Nerd Font Mono 13">üóò</span> Reboot'
      '<span font_desc="TerminessTTF Nerd Font Mono 18">‚èæ</span> Suspend'
      '<span font_desc="TerminessTTF Nerd Font Mono 18">‚èæ</span> Hibernate'
      '<span font_desc="TerminessTTF Nerd Font Mono 18">‚èª</span> Shutdown'
      '<span font_desc="TerminessTTF Nerd Font Mono 18">Ô°Ç</span> Exit'
    )

    #if [[ -x "$(command -v optimus-manager)" ]]; then
    #  gpu=$(optimus-manager --print-mode | rg -o "intel|nvidia")

    #  case "$gpu" in
    #  intel)
    #    exits+=('<span font_desc="TerminessTTF Nerd Font Mono 18">Ô¨ô</span> gpu nvidia')
    #    ;;
    #  nvidia)
    #    exits+=('<span font_desc="TerminessTTF Nerd Font Mono 18">Ô¨ô</span> gpu intel')
    #    ;;
    #  esac
    #fi

    printf '%s\n' "${exits[@]}"
}

menu_selection() {
    choice="$@"
    choice=($choice)
    choice=${choice[${#choice[@]}-1]}
	case "$choice" in
		Lock)
            xkblayout-state set 0
            ~/.config/i3/i3-lock-and-blur.sh
	        ;;
		Exit)
			i3-msg exit
			;;
        Shutdown)
          shutdown -P now
          ;;
        gpu*)
          optimus-manager --no-confirm --switch "$(rg -o "intel|nvidia" <<<"$choice")"
          ;;
        Lock)
          xkblayout-state set 0
          ~/.config/i3/i3-lock-and-blur.sh
          ;;
        Reboot)
          systemctl reboot
          ;;
        Suspend)
          systemctl suspend
          ;;
        Hibernate)
          playerctl pause
          systemctl hibernate
          ;;
    esac
}

options_open() {
    ID_CONKY=$(cat $WINDOW_ID_CONKY)
    ID_BAR=$(cat $WINDOW_ID_OPTIONS)

    xdotool windowraise $ID_CONKY
    animation_open $ID_BAR $ID_CONKY
    selection=$(menu_options | rofi -dmenu -i -p "" -markup-rows -location 3 -width 220 -line-margin 10 -config ~/.config/rofi/sidemenu.rasi -window-title "") 
    menu_selection $selection
    animation_close $ID_BAR $ID_CONKY
}

case "$1" in
    rofi)
        rofi_open;;
    search)
        search_open;;
    options)
        options_open;;
    launch)
        launch;;
    hide)
        echo "cmd:hide" >> /tmp/polybar_mqueue_full;;
    show)
        echo "cmd:show" >> /tmp/polybar_mqueue_full;;
esac
